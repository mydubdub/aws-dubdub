<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    
    <title>Node File Upload</title>
</head>
<body>
    <h1 align="center">ECG Signal Display</h1>
    
    <br>
    Name of File (without .csv) = <input type="text" id="nameoffile">
    <input type="button" value="Display" onclick="start();">
    <br>

    <form action="/" method="GET">
        <button>Return</button>
    </form>
    <br>
    <div id="myDiv" style="width:auto; height:600px"></div>
    
    <script type="text/javascript">
        
        function start(){
            
            getData();
            plot();
            
            async function getData(){
                const ys = [];
                const xs = [];
                // Record30down
                var fileName = document.querySelector("#nameoffile").value; //querySelector getElementById
                const response = await fetch(fileName + 'LPF.csv');
                const data = await response.text();
                console.log(fileName);
                
                const table = data.split('\n').slice(10);
                table.forEach (row => {
                    const columns = row.split('	');
                    const Yline = columns[1];
                    const Xline = columns[0];
                    //  for (i = 0; i<800; i++){
                        //     Xline[i];
                        // }
                        ys.push(parseFloat(Yline));
                        xs.push(parseFloat(Xline));
                    });
                    
                    const ys2 = [];
                    const xs2 = [];
                    // var fileName2 = document.querySelector('200edit.csv').value;
                    const response2 = await fetch(fileName + 'RLPFp.csv');
                    const data2 = await response2.text(); 
                    const table2 = data2.split('\n').slice(1);
                    table2.forEach (row => {
                        const columns2 = row.split('	');
                        const Yline2 = columns2[1];
                        const Xline2 = columns2[0];
                        
                        ys2.push(parseFloat(Yline2));
                        xs2.push(parseFloat(Xline2));
                        //  arr2.push = [{x: xs2, y: ys2}];
                    });
                    
                    const ys3 = [];
                    const xs3 = [];
                    // var fileName2 = document.querySelector('200edit.csv').value;
                    const response3 = await fetch(fileName + 'P.csv');
                    const data3 = await response3.text(); 
                    const table3 = data3.split('\n').slice(1);
                    table3.forEach (row => {
                        const columns3 = row.split('	');
                        const Yline3 = columns3[1];
                        const Xline3 = columns3[0];
                        
                        ys3.push(parseFloat(Yline3));
                        xs3.push(parseFloat(Xline3));
                    });
                    
                    return{ xs, ys, xs2, ys2, xs3, ys3 };
                };
                // document.getElementById("wrapper").style.height = '128px';
                
                async function plot(){
                    const main = await getData();
                    var LPF = {
                        x: main.xs,
                        y: main.ys,
                        name: 'Filtered Signal',
                        mode: 'lines',
                        marker: {
                            color: 'rgb(255, 0, 0)',
                            size: 12,
                            line: {
                                color: 'white',
                                width: 0.5
                            }
                        }
                    };
                    var R = {
                        x: main.xs2,
                        y: main.ys2,
                        name: 'Detected R-peak',
                        mode: 'markers',
                        marker: {
                            color: 'rgb(0, 255, 0)',
                            size: 12,
                            line: {
                                color: 'white',
                                width: 1
                            }
                        }
                    };
                    
                    var P = {
                        x: main.xs3,
                        y: main.ys3,
                        name: 'Detected P-wave',
                        mode: 'markers',
                        marker: {
                            color: 'rgb(0, 0, 255)',
                            size: 12,
                            line: {
                                color: 'white',
                                width: 1
                            }
                        }
                    };
                    
                    var layout = {
                        title:'ECG Data Signal',
                        font: {size: 15},
                        xaxis: {title: 'Milliseconds (ms)'},
                        yaxis: {title: 'mV'}
                    };
                    
                    var data = [LPF, R, P];
                    
                    Plotly.newPlot('myDiv', data, layout);
                };
            };
        </script>
        
    </body>
    </html>